SHELL := $(shell which bash)
SELF  := $(patsubst %/,%,$(dir $(abspath $(firstword $(MAKEFILE_LIST)))))

TERRAFORM_PROVIDER_LIBVIRT_VERSION ?= 0.6.0
TERRAFORM_PROVIDER_ESXI_VERSION    ?= 1.6.0

_GOPATH_ ?= $(HOME)/go

GO_REQUIREMENTS := \
golang.org/x/crypto/ssh \
github.com/hashicorp/terraform \
github.com/tmc/scp

TARGETS := \
$(_GOPATH_)/bin/terraform-provider-libvirt \
$(_GOPATH_)/bin/terraform-provider-esxi

define github_release_install
.PHONY: $(_GOPATH_)/bin/$(2) $(_GOPATH_)/src/github.com/$(1)/$(2)

$(_GOPATH_)/bin/$(2): $(_GOPATH_)/bin/$(2)-$(3)
	rm -f $$@ && ln -s $$< $$@

$(_GOPATH_)/bin/$(2)-$(3): $(_GOPATH_)/src/github.com/$(1)/$(2) go
	cd $$</ && GOPATH=$(_GOPATH_) go build -o $$@

$(_GOPATH_)/src/github.com/$(1)/$(2):
	install -d $$@/ && cd $$@/ && git clone --branch=v$(3) https://github.com/$(1)/$(2).git . || ( \
		git fetch origin v$(3) \
		&& git checkout v$(3) \
		&& git clean -df \
		&& git reset --hard v$(3) \
    )
endef

export

.PHONY: all go clean

all: $(TARGETS)

go:
	for REQUIREMENT in $(GO_REQUIREMENTS); do \
	    GOPATH=$(_GOPATH_) go get -d -u $$REQUIREMENT; \
	done

clean:
	-rm -f $(TARGETS)

$(eval \
	$(call github_release_install,dmacvicar,terraform-provider-libvirt,$(TERRAFORM_PROVIDER_LIBVIRT_VERSION)))

$(eval \
	$(call github_release_install,josenk,terraform-provider-esxi,$(TERRAFORM_PROVIDER_ESXI_VERSION)))
